const yup = require('yup');
{{importsColumns | schemaImports}}

const newPut{{entityName | toPascalCase}}Schema = yup.object().shape({
{% for column in filteredFinalColumns %}
    {{column.column | toCamelCase}}: yup.
        number().integer().required().label('{{column.column | toCamelCase}}').typeError('The {{column.column | toCamelCase}} field must be a number').test(
        'doesExist',
        'The {{column.column | toCamelCase}} field must be a valid {{column.column | toCamelCase}}',
        async function test({{column.column | toCamelCase}}) {
            if (!{{column.column | toCamelCase}}) {
                return false;
            }

            const {{column.column | toCamelCase}}Count = await select{{column.foreignKeyTo.targetTable | toPascalCase}}ById({ 
                {% if column.column != column.foreignKeyTo.targetColumn %}
                    {{column.foreignKeyTo.targetColumn | toCamelCase}}: {{column.column | toCamelCase}},
                {% else %}
                    {{column.column | toCamelCase}},
                {% endif %}
             });
            if ({{column.column | toCamelCase}}Count === 0) {
                return false;
            }
            return true;
        }),
{% endfor %}
{% for column in uniqueSchemaColumns %}
    {{column.column | toCamelCase}}: yup.
    {% if column.columnKey == 'MUL' %}
        {% if column.dataType == 'int' %}
            number().integer().nullable().label('{{column.column | toCamelCase}}').typeError('The {{column.column | toCamelCase}} field must be a number').test(
                'doesExist',
                'The {{column.column | toCamelCase}} field must be a valid {{column.column | toCamelCase}}',
                async function test({{column.column | toCamelCase}}) {
                    if (!{{column.column | toCamelCase}}) {
                        return true;
                    }

                    const {{column.column | toCamelCase}}Count = await select{{column.foreignKeyTo.targetTable | toPascalCase}}ById({ 
                        {% if column.column != column.foreignKeyTo.targetColumn %}
                            {{column.foreignKeyTo.targetColumn | toCamelCase}}: {{column.column | toCamelCase}},
                        {% else %}
                            {{column.column | toCamelCase}},
                        {% endif %}
                    });
                    if ({{column.column | toCamelCase}}Count === 0) {
                        return false;
                    }
                    return true;
                }),
        {% endif %}
    {% endif %}
    {% if column.columnKey != 'MUL' %}
        {% if column.dataType == 'varchar' %}
            string().min(1).max({{column.columnnType | varcharSize}}).label('{{column.column | toCamelCase}}').typeError('The {{column.column | toCamelCase}} field must be a string'),
        {% elsif column.dataType == 'int' %}
            number().integer().label('{{column.column | toCamelCase}}').typeError('The {{column.column | toCamelCase}} field must be a number'),
        {% elsif column.dataType == 'json' %}
            object().label('{{column.column | toCamelCase}}').typeError('The {{column.column | toCamelCase}} field must be a json'),
        {% elsif column.dataType == 'tinyint' %}
            boolean().label('{{column.column | toCamelCase}}').typeError('The {{column.column | toCamelCase}} field must be a boolean'),
        {% elsif column.dataType == 'datetime' %}
            date().label('{{column.column | toCamelCase}}').typeError('The {{column.column | toCamelCase}} field must be a date'),
        {% elsif column.dataType == 'date' %}
            date().label('{{column.column | toCamelCase}}').typeError('The {{column.column | toCamelCase}} field must be a date'),
        {% elsif column.dataType == 'char' %}
            string().min(1).max({{column.columnnType | varcharSize}}).label('{{column.column | toCamelCase}}').typeError('The {{column.column | toCamelCase}} field must be a string'),
        {% elsif column.dataType == 'year' %}
            string().min(1).max(4).label('{{column.column | toCamelCase}}').typeError('The {{column.column | toCamelCase}} field must be a valid year string'),
        {% elsif column.dataType == 'text' %}
            string().min(1).max({{column.columnnType | varcharSize}}).label('{{column.column | toCamelCase}}').typeError('The {{column.column | toCamelCase}} field must be a string'),
        {% elsif column.dataType == 'mediumtext' %}
            string().min(1).max({{column.columnnType | varcharSize}}).label('{{column.column | toCamelCase}}').typeError('The {{column.column | toCamelCase}} field must be a string'),
        {% elsif column.dataType == 'longtext' %}
            string().min(1).max({{column.columnnType | varcharSize}}).label('{{column.column | toCamelCase}}').typeError('The {{column.column | toCamelCase}} field must be a string'),
        {% elsif column.dataType == 'tinytext' %}
            string().min(1).max({{column.columnnType | varcharSize}}).label('{{column.column | toCamelCase}}').typeError('The {{column.column | toCamelCase}} field must be a string'),
        {% elsif column.dataType == 'binary' %}
            string().min(1).max({{column.columnnType | varcharSize}}).label('{{column.column | toCamelCase}}').typeError('The {{column.column | toCamelCase}} field must be a string'),
        {% elsif column.dataType == 'varbinary' %}
            string().min(1).max({{column.columnnType | varcharSize}}).label('{{column.column | toCamelCase}}').typeError('The {{column.column | toCamelCase}} field must be a string'),
        {% elsif column.dataType == 'bit' %}
            boolean().label('{{column.column | toCamelCase}}').typeError('The {{column.column | toCamelCase}} field must be a boolean'),
        {% elsif column.dataType == 'boolean' %}
            boolean().label('{{column.column | toCamelCase}}').typeError('The {{column.column | toCamelCase}} field must be a boolean'),
        {% elsif column.dataType == 'tinyint' %}
            boolean().label('{{column.column | toCamelCase}}').typeError('The {{column.column | toCamelCase}} field must be a boolean'),
        {% elsif column.dataType == 'smallint' %}
            number().integer().label('{{column.column | toCamelCase}}').typeError('The {{column.column | toCamelCase}} field must be a number'),
        {% elsif column.dataType == 'mediumint' %}
            number().integer().label('{{column.column | toCamelCase}}').typeError('The {{column.column | toCamelCase}} field must be a number'),
        {% elsif column.dataType == 'bigint' %}
            number().integer().label('{{column.column | toCamelCase}}').typeError('The {{column.column | toCamelCase}} field must be a number'),
        {% elsif column.dataType == 'decimal' %}
            number().integer().label('{{column.column | toCamelCase}}').typeError('The {{column.column | toCamelCase}} field must be a number'),
        {% elsif column.dataType == 'float' %}
            number().label('{{column.column | toCamelCase}}').typeError('The {{column.column | toCamelCase}} field must be a number'),
        {% elsif column.dataType == 'double' %}
            number().integer().label('{{column.column | toCamelCase}}').typeError('The {{column.column | toCamelCase}} field must be a number'),
        {% elsif column.dataType == 'blob'%}
            mixed().test('is-blob', 'Binary data', value => {return value instanceof Buffer || value instanceof Uint8Array || false;}),
        {% elsif column.dataType == 'mediumblob'%}
            mixed().test('is-blob', 'Binary data', value => {return value instanceof Buffer || value instanceof Uint8Array || false;}),
        {% elsif column.dataType == 'longblob'%}
            mixed().test('is-blob', 'Binary data', value => {return value instanceof Buffer || value instanceof Uint8Array || false;}),
        {% elsif column.dataType == 'tinyblob'%}
            mixed().test('is-blob', 'Binary data', value => {return value instanceof Buffer || value instanceof Uint8Array || false;}),
        {% endif %}
    {% endif %}
{% endfor %}
});

module.exports = newPut{{entityName | toPascalCase}}Schema;

