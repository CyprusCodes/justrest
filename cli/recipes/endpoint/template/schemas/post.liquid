const yup = require('yup');
{{schemaColumns | schemaImports}}

const newPost{{entityName | toPascalCase}}Schema = yup.object().shape({
{% for column in schemaColumns %}
    {{column.column | toCamelCase}}: yup.{% if column.nullable %}
        {% if column.columnKey == 'MUL' %}
            {% if column.dataType == 'int' %}
                number().integer().nullable().label('{{column.column | toCamelCase}}').typeError('The {{column.column | toCamelCase}} field must be a number').test(
                    'doesExist',
                    'The {{column.column | toCamelCase}} field must be a valid {{column.column | toCamelCase}}',
                    async function test({{column.column | toCamelCase}}) {
                        if (!{{column.column | toCamelCase}}) {
                            return true;
                        }

                        const {{column.column | toCamelCase}}Count = await select{{column.foreignKeyTo.targetTable | toPascalCase}}ById({{column.column | toCamelCase}});
                        if ({{column.column | toCamelCase}}Count === 0) {
                            return false;
                        }
                        return true;
                    }),
            {% endif %}
        {% endif %}
        {% if column.dataType == 'varchar' %}
            string().max({{column.columnnType | varcharSize}}).nullable().label('{{column.column | toCamelCase}}').typeError('The {{column.column | toCamelCase}} field must be a string'),
        {% elsif column.dataType == 'int' and column.columnKey != 'MUL' %}
            number().integer().nullable().label('{{column.column | toCamelCase}}').typeError('The {{column.column | toCamelCase}} field must be a number').typeError('The {{column.column | toCamelCase}} field must be a number'),
        {% elsif column.dataType == 'json' %}
            json().nullable().label('{{column.column | toCamelCase}}').typeError('The {{column.column | toCamelCase}} field must be a json'),
        {% elsif column.dataType == 'boolean' %}
            boolean().nullable().label('{{column.column | toCamelCase}}').typeError('The {{column.column | toCamelCase}} field must be a boolean').typeError('The {{column.column | toCamelCase}} field must be a boolean'),
        {% endif %}
    {% else %}
        {% if column.columnKey == 'MUL' %}
            {% if column.dataType == 'int' %}
                number().integer().required().label('{{column.column | toCamelCase}}').typeError('The {{column.column | toCamelCase}} field must be a number').test(
                    'doesExist',
                    'The {{column.column | toCamelCase}} field must be a valid {{column.column | toCamelCase}}',
                    async function test({{column.column | toCamelCase}}) {
                        if (!{{column.column | toCamelCase}}) {
                            return false;
                        }

                        const {{column.column | toCamelCase}}Count = await select{{column.foreignKeyTo.targetTable | toPascalCase}}ById({{column.column | toCamelCase}});
                        if ({{column.column | toCamelCase}}Count === 0) {
                            return false;
                        }
                        return true;
                    }),
            {% endif %}
        {% else %}
            {% if column.dataType == 'varchar' %}
                string().min(1).max({{column.columnnType | varcharSize}}).required().label('{{column.column | toCamelCase}}').typeError('The {{column.column | toCamelCase}} field must be a string'),
            {% elsif column.dataType == 'int' and column.columnKey != 'MUL' %}
                number().integer().required().label('{{column.column | toCamelCase}}').typeError('The {{column.column | toCamelCase}} field must be a number').typeError('The {{column.column | toCamelCase}} field must be a number'),
            {% elsif column.dataType == 'json' %}
                json().required().label('{{column.column | toCamelCase}}').typeError('The {{column.column | toCamelCase}} field must be a json'),
            {% elsif column.dataType == 'boolean' %}
                boolean().required().label('{{column.column | toCamelCase}}').typeError('The {{column.column | toCamelCase}} field must be a boolean').typeError('The {{column.column | toCamelCase}} field must be a boolean'),
            {% endif %}
        {% endif %}
    {% endif %}
{% endfor %}
});

module.exports = newPost{{entityName | toPascalCase}}Schema;
