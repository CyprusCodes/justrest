"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3217],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||o;return n?r.createElement(f,l(l({ref:t},u),{},{components:n})):r.createElement(f,l({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9250:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),l=["components"],i={id:"installation",title:"Installation",sidebar_label:"Installation"},s=void 0,c={unversionedId:"installation",id:"installation",isDocsHomePage:!1,title:"Installation",description:"You should install the XEST CLI first then start working on your project.",source:"@site/docs/installation.md",sourceDirName:".",slug:"/installation",permalink:"/docs/installation",editUrl:"https://github.com/CyprusCodes/xest/tree/main/documentation/docs/docs/installation.md",tags:[],version:"current",frontMatter:{id:"installation",title:"Installation",sidebar_label:"Installation"},sidebar:"docs",previous:{title:"What is Xest?",permalink:"/docs/what-is-xest-why"},next:{title:"Routing",permalink:"/docs/routing"}},u=[{value:"Bootstrapping Your API",id:"bootstrapping-your-api",children:[],level:2}],p={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"You should install the XEST CLI first then start working on your project."),(0,o.kt)("p",null,"To install XEST CLI;"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ npm install xest -g\n")),(0,o.kt)("p",null,"After installing the XEST CLI globally, you can now bootstrap your API."),(0,o.kt)("h2",{id:"bootstrapping-your-api"},"Bootstrapping Your API"),(0,o.kt)("p",null,"In order to create your API, you need to run the following commmand:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ xx [project-name]\n")),(0,o.kt)("p",null,"With one simple command, you will be installing all the necessary packages, utils, middlewares and required modules will be created for you. Have a look at the created directory."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ cd project-name\n")),(0,o.kt)("p",null,"to start your Xest API, run"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ xx run\n")),(0,o.kt)("p",null,"Et voila! You're ready to Xest :)"),(0,o.kt)("p",null,"The project-name directory will be created, node modules and a few other boilerplate files will be installed, and a src/ directory will be created and populated with several core files, forming a new API-directory with the following setup;"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 index.js\n\u251c\u2500\u2500 package-lock.json\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 node_modules\n\u251c\u2500\u2500 migrations\n\u251c\u2500\u2500 test\n\u251c\u2500\u2500 .env\n\u251c\u2500\u2500 .eslintignore\n\u251c\u2500\u2500 .eslintrc\n\u251c\u2500\u2500 .gitattributes\n\u251c\u2500\u2500 database.json\n\u251c\u2500\u2500 jsconfig.json\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 database\n\u2502 \u251c\u2500\u2500 database-schema.sql\n\u2502 \u2514\u2500\u2500 seed-data.sql\n\u2502 \u2514\u2500\u2500 docker-compose.yml\n\u2502 \u2514\u2500\u2500 test-database.json\n\u2514\u2500\u2500 src\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," is our local development environment configuration. When you run your application, a MySQL container will be started for you. You can connect to the local database instance by using the credentials listed in the ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," file."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"database-schema.sql")," is where you will define your database schema. It will be a series of CREATE TABLE statements which is used to populate your local development database."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"seed-data.sql")," will contain the test data that you want to insert into your database whilst developing or testing your application locally."))}d.isMDXComponent=!0}}]);