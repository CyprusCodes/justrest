"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[5267],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return p}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),g=u(n),p=a,h=g["".concat(s,".").concat(p)]||g[p]||d[p]||o;return n?r.createElement(h,l(l({ref:t},c),{},{components:n})):r.createElement(h,l({ref:t},c))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=g;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},9443:function(e,t,n){var r=(0,n(7294).createContext)(void 0);t.Z=r},1471:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return v},default:function(){return x},frontMatter:function(){return f},metadata:function(){return w},toc:function(){return k}});var r=n(7462),a=n(3366),o=n(7294),l=n(3905),i=n(2389),s=n(9443);var u=function(){var e=(0,o.useContext)(s.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},c=n(9521),d=n(6010),g="tabItem_vU9c";function p(e){var t,n,r,a=e.lazy,l=e.block,i=e.defaultValue,s=e.values,p=e.groupId,h=e.className,m=o.Children.map(e.children,(function(e){if((0,o.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),b=null!=s?s:m.map((function(e){var t=e.props;return{value:t.value,label:t.label}})),f=(0,c.lx)(b,(function(e,t){return e.value===t.value}));if(f.length>0)throw new Error('Docusaurus error: Duplicate values "'+f.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var v=null===i?i:null!=(t=null!=i?i:null==(n=m.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(r=m[0])?void 0:r.props.value;if(null!==v&&!b.some((function(e){return e.value===v})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+b.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var w=u(),k=w.tabGroupChoices,y=w.setTabGroupChoices,x=(0,o.useState)(v),T=x[0],O=x[1],E=[],S=(0,c.o5)().blockElementScrollPositionUntilNextRender;if(null!=p){var I=k[p];null!=I&&I!==T&&b.some((function(e){return e.value===I}))&&O(I)}var D=function(e){var t=e.currentTarget,n=E.indexOf(t),r=b[n].value;r!==T&&(S(t),O(r),null!=p&&y(p,r))},j=function(e){var t,n=null;switch(e.key){case"ArrowRight":var r=E.indexOf(e.currentTarget)+1;n=E[r]||E[0];break;case"ArrowLeft":var a=E.indexOf(e.currentTarget)-1;n=E[a]||E[E.length-1]}null==(t=n)||t.focus()};return o.createElement("div",{className:"tabs-container"},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,d.Z)("tabs",{"tabs--block":l},h)},b.map((function(e){var t=e.value,n=e.label;return o.createElement("li",{role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,className:(0,d.Z)("tabs__item",g,{"tabs__item--active":T===t}),key:t,ref:function(e){return E.push(e)},onKeyDown:j,onFocus:D,onClick:D},null!=n?n:t)}))),a?(0,o.cloneElement)(m.filter((function(e){return e.props.value===T}))[0],{className:"margin-vert--md"}):o.createElement("div",{className:"margin-vert--md"},m.map((function(e,t){return(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==T})}))))}function h(e){var t=(0,i.Z)();return o.createElement(p,(0,r.Z)({key:String(t)},e))}var m=function(e){var t=e.children,n=e.hidden,r=e.className;return o.createElement("div",{role:"tabpanel",hidden:n,className:r},t)},b=["components"],f={id:"debugging",title:"Debugging",sidebar_label:"Debugging"},v=void 0,w={unversionedId:"guides/debugging",id:"guides/debugging",isDocsHomePage:!1,title:"Debugging",description:"Debugging tools",source:"@site/docs/guides/debugging-guide.md",sourceDirName:"guides",slug:"/guides/debugging",permalink:"/docs/guides/debugging",editUrl:"https://github.com/CyprusCodes/xest/tree/main/documentation/docs/docs/guides/debugging-guide.md",tags:[],version:"current",frontMatter:{id:"debugging",title:"Debugging",sidebar_label:"Debugging"}},k=[{value:"Debugging tools",id:"debugging-tools",children:[{value:"Server debug",id:"server-debug",children:[],level:3},{value:"Browser debug",id:"browser-debug",children:[],level:3},{value:"Angular JS Batarang",id:"angular-js-batarang",children:[],level:3}],level:2},{value:"Logs",id:"logs",children:[{value:"Server logs",id:"server-logs",children:[],level:3},{value:"Browser console",id:"browser-console",children:[{value:"Actions",id:"actions",children:[],level:4},{value:"Dependencies",id:"dependencies",children:[],level:4}],level:3}],level:2}],y={toc:k};function x(e){var t=e.components,o=(0,a.Z)(e,b);return(0,l.kt)("wrapper",(0,r.Z)({},y,o,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"debugging-tools"},"Debugging tools"),(0,l.kt)("p",null,"Devs with AWE have some interesting tools to make their job easy"),(0,l.kt)("h3",{id:"server-debug"},"Server debug"),(0,l.kt)("p",null,"To debug the server-side of a web application project, we usually work with the IDE (",(0,l.kt)("em",{parentName:"p"},"Netbeans"),", ",(0,l.kt)("em",{parentName:"p"},"Eclipse"),", ",(0,l.kt)("em",{parentName:"p"},"IntelliJ"),", ",(0,l.kt)("em",{parentName:"p"},"Visual Studio Code"),") embedded debugger. This guide will show you how to debug in ",(0,l.kt)("em",{parentName:"p"},"Eclipse")),(0,l.kt)("p",null,"To start the server in debug mode we can right click on the server, and pick the debug option."),(0,l.kt)("img",{alt:"Debug mode",src:n(4996).Z("img/debug_mode.png")}),(0,l.kt)("p",null,"We can add a breakpoint anywhere in the code by right clicking at the side, and choosing toggle/add breakpoint."),(0,l.kt)("p",null,"For more information about debugging see eclipse documentation:"),(0,l.kt)(h,{defaultValue:"IntelliJ",values:[{label:"IntelliJ",value:"IntelliJ"},{label:"Eclipse",value:"Eclipse"},{label:"Netbeans",value:"Netbeans"},{label:"Visual Studio Code",value:"Visual Studio Code"}],mdxType:"Tabs"},(0,l.kt)(m,{value:"IntelliJ",mdxType:"TabItem"},(0,l.kt)("a",{target:"_blank",rel:"noopener noreferrer",href:"https://www.jetbrains.com/help/idea/debugging-code.html"},"IntelliJ debugging")),(0,l.kt)(m,{value:"Eclipse",mdxType:"TabItem"},(0,l.kt)("a",{target:"_blank",rel:"noopener noreferrer",href:"https://www.eclipse.org/community/eclipse_newsletter/2017/june/article1.php"},"Eclipse debugging")),(0,l.kt)(m,{value:"Netbeans",mdxType:"TabItem"},(0,l.kt)("a",{target:"_blank",rel:"noopener noreferrer",href:"https://netbeans.org/features/java/debugger.html"},"Netbeans debugging")),(0,l.kt)(m,{value:"Visual Studio Code",mdxType:"TabItem"},(0,l.kt)("a",{target:"_blank",rel:"noopener noreferrer",href:"https://code.visualstudio.com/docs/editor/debugging"},"Visual Studio Code debugging"))),(0,l.kt)("h3",{id:"browser-debug"},"Browser debug"),(0,l.kt)("p",null,"We can see the information flow between the server and the client by pressing F12 key and entering the network tab.\nThere are a few useful options there but we will focus on the WS (WebSocket) "),(0,l.kt)("p",null,"In the following example the interactions between the server and the client are displayed, and we can search through the JSON structure to see all the information and variables."),(0,l.kt)("img",{alt:"Web sockets",src:n(4996).Z("img/websockets.png")}),(0,l.kt)("p",null,"We can see the action that the server sent to the client, in this case is a type fill action with the parameters attached to it"),(0,l.kt)("h3",{id:"angular-js-batarang"},"Angular JS Batarang"),(0,l.kt)("p",null,"Angular JS Batarang is an extension for browsers that adds tools for debugging and profiling AngularJS applications."),(0,l.kt)("p",null," ",(0,l.kt)("a",{parentName:"p",href:"https://chrome.google.com/webstore/detail/angularjs-batarang/ighdmehidhipcmcojjgiloacoafjmpfk"},"Angular JS Batarang Chrome extension")),(0,l.kt)("p",null,"This extension allows us to see the angular scope info. The scope is the binding part between the HTML (view) and the JavaScript (controller).\nOnce the extension is installed, by pressing F12 and accessing the elements tab we can see the new $scope option."),(0,l.kt)("p",null,"The information displayed there contains all JavaScript methods and parameters, in JSON format."),(0,l.kt)("p",null,"We can select a window element by clicking the inspect option to see all the scope information regarding only that element.\nIn chrome the option is the following:"),(0,l.kt)("img",{alt:"Inspect Chrome",src:n(4996).Z("img/inspect_chrome.png")}),(0,l.kt)("p",null,"In this example, we select a grid containing users information. Between all the options we can see the ",(0,l.kt)("inlineCode",{parentName:"p"},"controller")," info, like the grid attributes, variable types..."),(0,l.kt)("img",{alt:"Scope controller",src:n(4996).Z("img/scope_controller.png")}),(0,l.kt)("p",null,"It is also interesting to see the ",(0,l.kt)("inlineCode",{parentName:"p"},"model")," option, as it contains the data itself."),(0,l.kt)("img",{alt:"Scope model",src:n(4996).Z("img/model_scope.png")}),(0,l.kt)("h2",{id:"logs"},"Logs"),(0,l.kt)("h3",{id:"server-logs"},"Server logs"),(0,l.kt)("p",null,"To search through the server logs we can use the tools Eclipse provides.\nOnce the server is running, the logs will appear in the Console tab.\nEvery action that the server executes will be displayed here, such as the SQL queries."),(0,l.kt)("p",null,"In the following example we have a grid that displays information from the users table, and a criteria that filters that grid by executing a SQL query attached to it:"),(0,l.kt)("img",{alt:"Grid logs",src:n(4996).Z("img/window_grid_log.png")}),(0,l.kt)("p",null,"Once we hit the search button, the server will execute the SQL query, and the console log will display it:"),(0,l.kt)("img",{alt:"SQl log example",src:n(4996).Z("img/log_query.png")}),(0,l.kt)("p",null,"In this case we can see the date and time that the action was executed as well as the user, the screen, the query ID, and the full SQL query."),(0,l.kt)("h3",{id:"browser-console"},"Browser console"),(0,l.kt)("p",null,"To search through the browser console, press the F12 key, and click on the Console tab."),(0,l.kt)("h4",{id:"actions"},"Actions"),(0,l.kt)("p",null,"In this tab we can look at actions taking place at the client side, along with the elapsed times they take and the parameters sent to the server.\nIn this example there is a fill action, used to fill a grid with query data."),(0,l.kt)("img",{alt:"Browser log example",src:n(4996).Z("img/browser_log.png")}),(0,l.kt)("h4",{id:"dependencies"},"Dependencies"),(0,l.kt)("p",null,"In the following example we have a grid, and a view button with a dependency attached to it. The dependency checks if the number of selected rows is not equal to 1. If the condition is true, the view button is hidden. Otherwise the button is activated."),(0,l.kt)("img",{alt:"Depencency log example",src:n(4996).Z("img/dependency_log.png")}),(0,l.kt)("p",null,"As only one row is selected, the condition result is false, therefore, the button is not hidden."),(0,l.kt)("img",{alt:"Depencency condition example",src:n(4996).Z("img/dependency_condition.png")}))}x.isMDXComponent=!0}}]);